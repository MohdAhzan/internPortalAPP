// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github/MohdAhzan/internPortalAPP/pkg/api"
	"github/MohdAhzan/internPortalAPP/pkg/api/handlers"
	"github/MohdAhzan/internPortalAPP/pkg/api/middleware"
	"github/MohdAhzan/internPortalAPP/pkg/config"
	"github/MohdAhzan/internPortalAPP/pkg/db"
	"github/MohdAhzan/internPortalAPP/pkg/helper"
	"github/MohdAhzan/internPortalAPP/pkg/repository"
	"github/MohdAhzan/internPortalAPP/pkg/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*server.ServerHTTP, error) {
	gormDB, err := db.ConnectDB(cfg)
	if err != nil {
		return nil, err
	}
	adminRepository := repository.NewAdminRepository(gormDB)
	receptionRepository := repository.NewReceptionRepository(gormDB)
	helperHelper := helper.NewHelper(cfg)
	adminUsecase := usecase.NewAdminUsecase(adminRepository, receptionRepository, cfg, helperHelper)
	userHandler := handlers.NewUserHandler(adminUsecase)
	adminAuth := NewAdminAuth(cfg)
	receptionistAuth := NewReceptionistAuth(cfg)
	doctorAuth := NewDoctorAuth(cfg)
	serverHTTP := server.NewServeHTTP(userHandler, cfg, adminAuth, receptionistAuth, doctorAuth)
	return serverHTTP, nil
}

// wire.go:

func NewAdminAuth(cfg config.Config) middleware.AdminAuth {
	return middleware.AdminAuth(middleware.AdminAuthMiddleware(cfg))
}

func NewReceptionistAuth(cfg config.Config) middleware.ReceptionistAuth {
	return middleware.ReceptionistAuth(middleware.ReceptionistAuthMiddleware(cfg))
}

func NewDoctorAuth(cfg config.Config) middleware.DoctorAuth {
	return middleware.DoctorAuth(middleware.DoctorAuthMiddleware(cfg))
}
